import fetch from 'node-fetch';
import alldl from 'rahad-media-downloader';

const queue = []; // –û—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤

class Processor {
    static async processTikTok(url) {
        try {
            const result = await alldl.rahadtikdl(url);

            if (result.data && result.data.noWatermarkMp4) {
                const videoUrl = result.data.noWatermarkMp4;
                const response = await fetch(videoUrl);
                if (!response.ok) throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ: ${response.statusText}`);
                const videoBuffer = await response.buffer();
                return {
                    buffer: videoBuffer,
                    caption: result.title || '–í–∞—à–µ TT –≤–∏–¥–µ–æ',
                    type: 'video/mp4'
                };
            } else {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
            }
        } catch (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ TikTok: ${error.message}`);
        }
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    // –ü—Ä–∏–º–µ—Ä –¥–ª—è Instagram:
    static async processInstagram(url) {
        // –í–∞—à –∫–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Instagram –≤–∏–¥–µ–æ/—Ñ–æ—Ç–æ
    }

    // –ü—Ä–∏–º–µ—Ä –¥–ª—è YouTube:
    static async processYouTube(url) {
        const result = await alldl.rahadytdl(url);
        console.log(result);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω—É–∂–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç URL
    static async processContent(url) {
        if (url.includes('tiktok.com')) {
            return await this.processTikTok(url);
        } else if (url.includes('instagram.com')) {
            return await this.processInstagram(url);
        } else if (url.includes('youtube.com')) {
            return await this.processYouTube(url);
        } else {
            throw new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞.');
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
export async function processQueue(bot) {
    if (queue.length > 0) {
        const { chatId, text } = queue.shift(); // –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∫—É

        try {
            await bot.sendMessage(chatId, 'üîÑ –ó–∞–≥—Ä—É–∂–∞—é –∫–æ–Ω—Ç–µ–Ω—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...');

            const result = await Processor.processContent(text);

            if (result) {
                const { buffer, caption, type } = result;
                await bot.sendVideo(chatId, buffer, {
                    caption: caption || '–í–∞—à–µ –≤–∏–¥–µ–æ',
                }, {
                    filename: 'content.mp4',
                    contentType: type
                });
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', error);
            await bot.sendMessage(chatId, '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –≤ –æ—á–µ—Ä–µ–¥—å
export function addToQueue(item) {
    queue.push(item);
}

export function getQueueLength() {
    return queue.length;
}
